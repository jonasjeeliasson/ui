{"version":3,"file":"main.f011616f73d9fe902198.bundle.js","sources":["webpack:///./src/Atoms/CssGrid/utils.ts"],"sourcesContent":["import R from 'ramda';\nimport { AreaInfo } from './CssGrid.types';\n\nconst minimal = R.reduce(R.min, Infinity);\nconst maximal = R.reduce(R.max, -Infinity);\n\n/**\n * Calculate info for areas:\n * id: unique id for area name\n * rowStart: on which row area starts (1...)\n * rowSpan: how many rows area takes (1...)\n * colStart: on which column area starts (1...)\n * colSpan: how many columns area takes (1...)\n * IE11 likes explicitness A LOT\n */\nexport const getAreasInfo = (\n  areas: string[][],\n  isGapPresented: { row: boolean; col: boolean },\n): Record<string, AreaInfo> => {\n  const size = {\n    col: areas[0].length,\n    row: areas.length,\n  };\n  const flatAreas = (R.flatten(areas) as unknown) as string[];\n\n  const areaNames = R.uniq(flatAreas);\n\n  const areaInfos = Object.values(\n    flatAreas.reduce((acc, areaName, idx) => {\n      if (!acc[areaName])\n        acc[areaName] = {\n          coordinates: [],\n          id: R.indexOf(areaName, areaNames) + 1,\n          name: areaName,\n        };\n      const row = Math.trunc(idx / size.col);\n      const col = Math.trunc(idx % size.col);\n      // 3 elems in col\n      // idx = 3\n      acc[areaName].coordinates.push({ row, col });\n\n      return acc;\n    }, {}),\n  );\n\n  return (areaInfos as any).reduce(\n    (\n      acc: Record<string, AreaInfo>,\n      area: { coordinates: Array<{ row: number; col: number }>; name: string; id: number },\n    ) => {\n      const { coordinates, name, id } = area;\n      const rows = coordinates.map(R.prop('row'));\n      const cols = coordinates.map(R.prop('col'));\n      let rowStart = minimal(rows);\n      let rowSpan = maximal(rows) - rowStart;\n      if (isGapPresented.row) {\n        rowSpan *= 2;\n        rowStart *= 2;\n      }\n      let colStart = minimal(cols);\n      let colSpan = maximal(cols) - colStart;\n      if (isGapPresented.col) {\n        colSpan *= 2;\n        colStart *= 2;\n      }\n\n      acc[name] = {\n        id,\n        rowStart: rowStart + 1,\n        rowSpan: rowSpan + 1,\n        colStart: colStart + 1,\n        colSpan: colSpan + 1,\n      };\n      return acc;\n    },\n    {} as Record<string, AreaInfo>,\n  );\n};\n"],"mappings":"AAGA","sourceRoot":""}