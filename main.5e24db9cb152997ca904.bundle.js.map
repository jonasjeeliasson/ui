{"version":3,"file":"main.5e24db9cb152997ca904.bundle.js","sources":["webpack:///./src/common/utils.ts"],"sourcesContent":["import * as R from 'ramda';\nimport React from 'react';\n\nexport const assert = (\n  expression: boolean,\n  errorMessage: string,\n  options?: { level?: 'warn' },\n): true => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!expression) {\n      if (options && options.level === 'warn') {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n      } else {\n        throw new Error(errorMessage);\n      }\n    }\n  }\n  // For chaining with &&\n  return true;\n};\n\nexport const deprecate = (message: string) => <T extends {} | Function>(target: T): T => {\n  if (process.env.NODE_ENV !== 'production') {\n    return typeof Proxy === 'undefined'\n      ? target\n      : new Proxy(target, {\n          get(getTarget, getProp) {\n            console.warn(`Deprecated: ${message}`);\n            return getTarget[getProp];\n          },\n          apply(applyTarget, thisArg, argumentsList) {\n            // @ts-ignore\n            return applyTarget.apply(thisArg, argumentsList);\n          },\n        });\n  }\n  return target;\n};\n\nexport const isUndefined = (x: any): x is undefined => typeof x === 'undefined';\nexport const isElement = (x: any): x is React.ReactNode => React.isValidElement(x);\nexport const isNumber = (x: any): x is number => typeof x === 'number';\n\nexport const pickAriaAttributes = R.pickBy((_, key: string) => R.test(/^aria-/, key));\n\nconst convertToDate = (value: number) => new Date(value);\nconst isInvalid = R.anyPass([\n  R.isNil,\n  R.pipe(\n    convertToDate,\n    R.toString,\n    R.equals('Invalid Date'),\n  ),\n]);\n\nexport const isValidDateTimeNumber = R.complement(isInvalid) as (x: any) => x is number;\n"],"mappings":"AAGA","sourceRoot":""}